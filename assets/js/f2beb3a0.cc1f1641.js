"use strict";(self.webpackChunk_zeplo_docs=self.webpackChunk_zeplo_docs||[]).push([[1486],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(t),d=o,f=m["".concat(p,".").concat(d)]||m[d]||c[d]||i;return t?r.createElement(f,a(a({ref:n},u),{},{components:t})):r.createElement(f,a({ref:n},u))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7469:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),a=["components"],l={id:"environments",title:"Environments",sidebar_label:"Environments",slug:"/environments"},p=void 0,s={unversionedId:"environments",id:"environments",title:"Environments",description:"You often want to run your queue in a development or test environment. You can add a _env query parameter (or X-Zeplo-Env header) to your requests to specify which environment the request is running in. This will then appear in the console, and can be used to filter requests.",source:"@site/docs/environments.md",sourceDirName:".",slug:"/environments",permalink:"/docs/environments",editUrl:"https://github.com/zeplo/site/edit/master/docs/environments.md",tags:[],version:"current",frontMatter:{id:"environments",title:"Environments",sidebar_label:"Environments",slug:"/environments"},sidebar:"someSidebar",previous:{title:"Tracing",permalink:"/docs/tracing"},next:{title:"API",permalink:"/docs/api"}},u={},c=[{value:"Running in development",id:"running-in-development",level:3},{value:"Running in production",id:"running-in-production",level:3},{value:"On premise (running Zeplo behind your firewall)",id:"on-premise-running-zeplo-behind-your-firewall",level:3}],m={toc:c};function d(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"You often want to run your queue in a development or test environment. You can add a ",(0,i.kt)("inlineCode",{parentName:"p"},"_env")," query parameter (or ",(0,i.kt)("inlineCode",{parentName:"p"},"X-Zeplo-Env")," header) to your requests to specify which environment the request is running in. This will then appear in the console, and can be used to filter requests."),(0,i.kt)("h3",{id:"running-in-development"},"Running in development"),(0,i.kt)("p",null,"The easiest way to run Zeplo in your development environment is to simply remove the ",(0,i.kt)("inlineCode",{parentName:"p"},"zeplo.to/")," prefix based on an environment variable. Below is an example of how you might setup a utility function to handle this."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import axios from 'axios'\n\nconst { RALLEY_TOKEN, NODE_ENV } = process.env\n\nexport default function queue (url: string, data: any) {\n  return axios(url, {\n    method: 'POST',\n    data,\n    params: { \n      _token: RALLEY_TOKEN,\n      _env: NODE_ENV,\n    },\n    baseURL: NODE_ENV === 'production' ? `https://zeplo.to/` : '',\n  })\n}\n")),(0,i.kt)("p",null,"This approach has the advantage that in development, errors are thrown directly which can lead to easier debugging \ud83d\ude4c."),(0,i.kt)("h3",{id:"running-in-production"},"Running in production"),(0,i.kt)("p",null,"The easiest way to run Zeplo in production is to expose the endpoint you want to call to the internet. Simply ",(0,i.kt)("a",{parentName:"p",href:"https://zelark.github.io/nano-id-cc/"},"create a secret token")," which can then passed along with every request."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import express from 'express'\n\nconst { SECRET_TOKEN } = process.env\n\nconst app = express()\n\napp.get('/my-service', (req) => {\n  if (req.query.secret !== SECRET_TOKEN) {\n    throw new Error('Not allowed!')\n  }\n  ...\n})\n")),(0,i.kt)("p",null,"You would then call this service with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"zeplo.to/my-url.com/my-service?secret=s123&_token=<zeplo_token>\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note:")," all Zeplo parameters are stripped from the URL before being relayed, so you cannot check for presence of ",(0,i.kt)("inlineCode",{parentName:"p"},"?_token"),"."),(0,i.kt)("h3",{id:"on-premise-running-zeplo-behind-your-firewall"},"On premise (running Zeplo behind your firewall)"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://ralley.typeform.com/to/cLjadaIA"},"Contact sales")," for running on-premise solution."))}d.isMDXComponent=!0}}]);