"use strict";(self.webpackChunk_zeplo_docs=self.webpackChunk_zeplo_docs||[]).push([[6247],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(r),f=a,y=d["".concat(p,".").concat(f)]||d[f]||s[f]||o;return r?n.createElement(y,i(i({ref:t},u),{},{components:r})):n.createElement(y,i({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2656:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return s}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],l={id:"retry",title:"Retry",sidebar_label:"Retry",slug:"/retry"},p=void 0,c={unversionedId:"retry",id:"retry",title:"Retry",description:"You can automatically retry requests that fail by adding the _retry query parameter or X-Zeplo-Retry header.",source:"@site/docs/retry.md",sourceDirName:".",slug:"/retry",permalink:"/docs/retry",editUrl:"https://github.com/zeplo/site/edit/master/docs/retry.md",tags:[],version:"current",frontMatter:{id:"retry",title:"Retry",sidebar_label:"Retry",slug:"/retry"},sidebar:"someSidebar",previous:{title:"Queue",permalink:"/docs/queue"},next:{title:"Delay",permalink:"/docs/delay"}},u={},s=[{value:"Retry Backoff",id:"retry-backoff",level:3},{value:"What is considered a failed attempt?",id:"what-is-considered-a-failed-attempt",level:3}],d={toc:s};function f(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"You can automatically retry requests that fail by adding the ",(0,o.kt)("inlineCode",{parentName:"p"},"_retry")," query parameter or ",(0,o.kt)("inlineCode",{parentName:"p"},"X-Zeplo-Retry")," header."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"zeplo.to/your_url.com?_retry=3\n")),(0,o.kt)("h3",{id:"retry-backoff"},"Retry Backoff"),(0,o.kt)("p",null,"By default, retries will be attempted at a fixed interval of 1 second. You can specify how retries should be attempted by adding one of the following backoff approaches:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"immediate")," - runs the retry requests immediately after the initial request")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"exponential,<seconds>")," - exponentially increases the backoff by ",(0,o.kt)("inlineCode",{parentName:"p"},"seconds^2"),". E.g. if set to 2, the first it would be 1 (1^2), 4 (2^2), 9 (3^2) seconds... and so on.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"fixed,<seconds>")," - interval remains constant"),(0,o.kt)("p",{parentName:"li"}," For example:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"zeplo.to/your_url.com?_retry=3|immediate\nzeplo.to/your_url.com?_retry=3|fixed|1\nzeplo.to/your_url.com?_retry=3|exponential|1\n")),(0,o.kt)("p",{parentName:"li"}," With a retry of ",(0,o.kt)("inlineCode",{parentName:"p"},"3")," a maximum of 4 calls will be made to your endpoint - 1 for the original request, and 3 retry requests."))),(0,o.kt)("h3",{id:"what-is-considered-a-failed-attempt"},"What is considered a failed attempt?"),(0,o.kt)("p",null,"If we received a HTTP response status code greater than or equal to 400."))}f.isMDXComponent=!0}}]);